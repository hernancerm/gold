#!/bin/zsh -f

typeset -r help_message='Usages:
o gold [--help|-h]
    Display this help message.

o gold (--version|-v)
    Display the version.

o gold <config-file> <sub-command>
    <config-file>
      Config file path, written in Zsh, which must define the following parameters:
      test_cases
        Numerically indexed array with the name of the test cases. This allows Gold to know how many
        test cases should be executed and provides a tag to print for each test.
      resources
        Holds the file path to a dir to provide data for the command. At a minimum, it is expected
        that for each test case there is one golden file in this directory with the name
        `<index>_golden.txt`.
      command
        Command to execute which output is compared against a golden file. The file can be any valid
        Zsh command. Two strings are replaced before executing the command: <R> with the `resources`
        value and <I> with the test case index. Indices begin at 1.
    <sub-command>
      list
        List all test cases.
      run-all
        Run all test cases.
      run <test-case-index>
        Run a single test case, by index.
      execute <test-case-index>
        Execute the command corresponding to a test case, by index.
      patch-all
        Patch (fix with current diff output) all test cases.
      patch <text-case-index>
        Patch (fix with current diff output) a single test case, by index.'

# Form: gold [--help|-h]

if [[ "${1}" = '--help' ]] || [[ "${1}" = '-h' ]] || [[ "${#@}" -eq 0 ]]; then
  echo "${help_message}"
  return 0
fi

# Form: gold (--version|-v)

if [[ "${1}" = '--version' ]] || [[ "${1}" = '-v' ]]; then
  echo '0.2.4-dev'
  return 0
fi

# Form: gold <config-file> <sub-command>

. "${1}"

## @param $1 Command.
## @param $2 Test case index.
## @param $3 Resources directory file path.
function _build_command {
  echo "${${1//<R>/${3}}//<I>/${2}}"
}

## @param $1 Test case index. This is used to find the associated resource files.
## @param $2 Test case name. Used to print for user information.
## @param $3 Resources directory file path.
## @param $4 Command used to get the result to compare with the golden file.
## @param $5 (optional) Patch or not to patch. By default, do not patch.
## @stdout Diff or patch output.
function _run_test {
  echo "start: (${1}) ${2}"

  # setup - data
  local golden_file_path="${3}/${1}_golden.txt"
  local command_output="$(eval ${${4//<R>/${3}}//<I>/${1}})"
  local command_output="$(eval $(_build_command "${4}" $1 "$3"))"

  # execute
  local diff=$(diff -u "${golden_file_path}" <(echo "${command_output}"))

  if [[ "${5}" = 'patch' ]]; then
    # The command `patch` is not used since I ran into an error `patch:1: division by zero`.
    echo "${command_output}" > "${golden_file_path}"
    echo "Patch complete for: ${golden_file_path}"
  elif [[ -n "${diff}" ]]; then
    # verify
    command -v delta >/dev/null && echo "${diff}" | delta --pager 'less -rFX' || echo "${diff}"
  fi
}

# SUB COMMANDS

## List all test cases.
function list {
  local test_case_index=1
  local heading='Index,Test case'
  local body=''
  for test_case in ${test_cases}; do
    body="${body:+${body}\n}${test_case_index},${test_case}"
    test_case_index=$((test_case_index+1))
  done
  echo "${heading}\n${body}" | column -s, -t
}

## Run all test cases.
function run-all {
  for (( i=1; i<=${#test_cases}; i++ )); do
    _run_test $i "${test_cases[$i]}" "${resources}" "${command}"
  done
}

## Run a single test case, by index.
## @param $1 Test case number (index).
function run {
  _run_test $1 "${test_cases[$1]}" "${resources}" "${command}"
}

## Run the command for a single test case, by index.
## @param $1 Test case number (index).
function execute {
  eval $(_build_command "${command}" $1 "${resources}")
}

## Patch (fix with current diff output) all test cases.
function patch-all {
  for (( i=1; i<=${#test_cases}; i++ )); do
    _run_test $i "${test_cases[$i]}" "${resources}" "${command}" 'patch'
  done
}

## Patch (fix with current diff output) a single test case, by index.
## @param $1 Test case number (index).
function patch {
  _run_test $1 "${test_cases[$1]}" "${resources}" "${command}" 'patch'
}

eval "${@[@]:2}"
